import { For, getOwner, runWithOwner } from "solid-js";
import PrimaryActionButton from "./PrimaryActionButton";
import { getClosestGitObjectForBuild } from "../util/buildVersion";
import { writeText } from "@tauri-apps/api/clipboard";
import { JsonMap, stringify } from "@iarna/toml";
import { toast } from "solid-toast";
import { renderOptionsControls } from "../util/packSquashOptions";
import { useNavigate } from "@solidjs/router";
import { useI18n } from "../contexts/i18n";
import { selectedPackPath } from "../views/PackSelection";
import CenteredButtonGrid from "./CenteredButtonGrid";

export default (props: {
  optionsSetter: (options: Record<string, unknown>) => void;
  nextViewRoute: string;
}) => {
  const [l10n] = useI18n();
  const navigate = useNavigate();
  const [optionControls, optionsObject] = renderOptionsControls();

  const componentOwner = getOwner();
  if (!componentOwner) {
    throw Error("No component owner for OptionsEditor");
  }

  if (!selectedPackPath) {
    throw new Error("No selected pack path");
  }
  optionsObject.pack_directory = selectedPackPath;

  const optionsForm = (
    <form
      id="options-form"
      class="grid grid-cols-1 gap-y-2 gap-x-2 sm:gap-y-4 sm:gap-x-4 xl:grid-cols-2"
      noValidate={true}
      onSubmit={(event) => {
        event.preventDefault();

        if (!event.currentTarget.checkValidity()) {
          runWithOwner(componentOwner, () => {
            toast.error(
              l10n("configuration-screen-invalid-custom-options-error")
            );
          });
        }

        props.optionsSetter(optionsObject);
        navigate(props.nextViewRoute, { replace: true });
      }}
    >
      <For each={optionControls}>{(control) => control}</For>
    </form>
  ) as HTMLFormElement;

  return (
    <>
      {optionsForm}

      <CenteredButtonGrid columns={2}>
        <PrimaryActionButton
          type="submit"
          form="options-form"
          class="col-span-full mx-auto sm:col-auto"
        >
          {l10n("configuration-screen-optimize-action")}
        </PrimaryActionButton>

        <PrimaryActionButton
          class="col-span-full mx-auto sm:col-auto"
          onClick={async () => {
            if (!optionsForm.checkValidity()) {
              return runWithOwner(componentOwner, () =>
                toast.error(
                  l10n("configuration-screen-try-to-copy-invalid-options-error")
                )
              );
            }

            const closestGitObject = getClosestGitObjectForBuild();

            await writeText(
              `# PackSquash${
                closestGitObject ? ` ${closestGitObject}` : ""
              } options file, generated by the PackSquash GUI${
                closestGitObject
                  ? `\n\n# JSON schema directive for enhancing text editor support. It can be safely removed\n#:schema https://raw.githubusercontent.com/ComunidadAylas/PackSquash/${closestGitObject}/data/options_schema.json`
                  : ""
              }\n\n${stringify(optionsObject as JsonMap)}`
            );

            runWithOwner(componentOwner, () =>
              toast.success(l10n("configuration-screen-options-copied"))
            );
          }}
        >
          {l10n("configuration-screen-copy-options-action")}
        </PrimaryActionButton>
      </CenteredButtonGrid>
    </>
  );
};
