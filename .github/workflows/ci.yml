name: CI

on:
  push:
  pull_request:
    types:
      - opened
      - synchronize
  release:
    types:
      - published

env:
  DEBIAN_FRONTEND: noninteractive

  CONST_RANDOM_SEED: ${{ secrets.CONST_RANDOM_SEED }}

jobs:
  static-analysis:

    runs-on: ubuntu-latest

    # Exclude in-repo PRs from running this job
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork

    steps:
      - name: 📥 Checkout source
        uses: actions/checkout@v3

      # Necessary due to Tauri macro expectations. See: https://github.com/tauri-apps/tauri/issues/3142
      - name: ➕ Create GUI package frontend dist directory
        run: mkdir packages/packsquash_gui/dist

      - name: 🧰 Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt, clippy

      - name: 🔍 Clippy check
        uses: giraffate/clippy-action@v1
        if: github.event_name != 'release'
        with:
          clippy_flags: --all-targets
          reporter: github-check
          fail_on_error: true

      - name: 🔍 Cargo deny check
        uses: EmbarkStudios/cargo-deny-action@v1

      - name: 🔍 Check PackSquash Linux desktop entries correctness
        shell: bash -ce 'shopt -s globstar; {0}'
        run: desktop-file-validate **/*.desktop

      - name: 🔍 Check Rust source code format
        run: cargo fmt --all --check

  build:

    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - x86_64-pc-windows-gnu
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - x86_64-apple-darwin

        include:
          - target: x86_64-unknown-linux-gnu
            host-target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
            container: node:16-bullseye-slim
            pkg-config-path: /usr/lib/x86_64-linux-gnu/pkgconfig
            apt-arch: amd64
            appimage-arch: x86_64

          - target: x86_64-unknown-linux-musl
            host-target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
            container: debian:sid-slim
            apt-arch: amd64

          - target: aarch64-unknown-linux-gnu
            host-target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
            container: node:16-bullseye-slim
            pkg-config-path: /usr/lib/aarch64-linux-gnu/pkgconfig
            apt-arch: arm64
            appimage-arch: aarch64

          - target: aarch64-unknown-linux-musl
            host-target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
            container: debian:sid-slim
            apt-arch: arm64

          - target: x86_64-pc-windows-gnu
            host-target: x86_64-pc-windows-gnu
            runner: windows-latest
            executable-extension: .exe

          - target: x86_64-apple-darwin
            host-target: x86_64-apple-darwin
            runner: macos-latest

          - target: aarch64-apple-darwin
            host-target: x86_64-apple-darwin
            runner: macos-latest

    runs-on: ${{ matrix.runner }}
    timeout-minutes: 60

    container: ${{ matrix.container }}

    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}
      RUSTUP_TOOLCHAIN: nightly-${{ matrix.host-target }}
      TARGET_APPIMAGE_ARCH: ${{ matrix.appimage-arch }}
      TARGET_APPIMAGE_APT_ARCH: ${{ matrix.apt-arch }}
      PKG_CONFIG_ALLOW_CROSS: 1
      PKG_CONFIG_PATH: ${{ matrix.pkg-config-path }}

    # Exclude in-repo PRs from running this job
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork

    steps:
      - name: 🧰 Install toolchain
        if: matrix.runner == 'ubuntu-latest'
        run: |
          apt-get update
          # curl is required by rustup and Tauri.
          # markdown and html2text are required to generate the Debian package only.
          # The third line contains packages necessary for appimage-builder only.
          # The fourth line contains packages neccessary for Tauri.
          # The fifth line contains packages necessary for build-time JSON Schema generation
          apt-get install -yq build-essential git curl \
                              markdown html2text \
                              python3-venv file zsync desktop-file-utils gtk-update-icon-cache fakeroot squashfs-tools \
                              libssl-dev:${{ matrix.apt-arch }} libwebkit2gtk-4.0-dev:${{ matrix.apt-arch }} \
                              jq

      - name: 🧰 Install toolchain
        if: matrix.runner == 'windows-latest'
        run: chocolatey install jq

      - name: 🧰 Install toolchain
        if: matrix.runner == 'macos-latest'
        run: brew install jq

      - name: 🧰 Install Linux ARM64 cross-compilation toolchain
        if: startsWith(matrix.target, 'aarch64-unknown-linux')
        run: |
          dpkg --add-architecture arm64
          apt-get update
          # libgcc-s1:arm64 is a dependency of libc6:arm64 that Aptitude
          # installs as usual, but for some reason the latest sid-slim image
          # as of 2023-06-13 refers to broken repositories or packages where
          # apt-get install fails
          apt-get install -yq gcc-aarch64-linux-gnu qemu-user libc6:arm64 libgcc-s1:arm64

      # As of 2023-05-24, only the Debian unstable musl-dev ARM64 package ships with an
      # aarch64-linux-musl-gcc script that wraps the aarch64-linux-gnu-gcc cross-compiler
      # provided by the gcc-aarch64-linux-gnu package to link against musl
      - name: 🧰 Install Linux ARM64 cross-compilation musl development files
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: apt-get install -yq musl-dev:arm64

      - name: 🧰 Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly-${{ matrix.host-target }}
          targets: ${{ env.CARGO_BUILD_TARGET }}
          components: rust-src

      - name: 💨 Cache Rust artifacts
        uses: Swatinem/rust-cache@v2

      - name: 🧰 Install cargo-deb
        if: endsWith(matrix.target, '-linux-gnu')
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-deb

      - name: 📥 Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Keep the commit history for proper version information

      # Necessary due to Tauri macro expectations. See: https://github.com/tauri-apps/tauri/issues/3142
      - name: ➕ Create GUI package frontend dist directory
        run: mkdir packages/packsquash_gui/dist

      # Our build container is minimal, and it doesn't contain any systemd package.
      # systemd is responsible for setting up the machine ID files we use for
      # testing the system ID retrieval code, so copy a dummy one
      - name: 📏 Set up a dummy D-Bus machine ID for tests
        if: startsWith(matrix.runner, 'ubuntu')
        run: cat /proc/sys/kernel/random/boot_id | tr -d '-' > /run/machine-id

      - name: ✔️ Run tests
        if: startsWith(matrix.target, 'x86_64-') || contains(matrix.target, '-linux-')
        run: cargo test --release -- -Z unstable-options --report-time

      - name: 🔨 Build with optimized standard library
        run: cargo build --target ${{ env.CARGO_BUILD_TARGET }} -Z build-std --release

      - name: 🔨 Generate CLI Debian package
        if: endsWith(matrix.target, '-linux-gnu')
        run: packages/packsquash_cli/bundles/deb/build.sh --target ${{ env.CARGO_BUILD_TARGET }} -- -Z build-std

      - name: 🔨 Generate GUI Debian package
        if: matrix.runner == 'ubuntu-latest'
        run: packages/packsquash_gui/src-tauri/bundles/deb/build.sh --target ${{ env.CARGO_BUILD_TARGET }} -- -Z build-std

      - name: 🔨 Generate GUI AppImage
        if: matrix.runner == 'ubuntu-latest'
        run: packages/packsquash_gui/src-tauri/bundles/appimage/build.sh

      - name: 📤 Upload CLI binary
        if: ${{ !contains(matrix.target, '-linux-') || endsWith(matrix.target, '-linux-musl') }}
        uses: actions/upload-artifact@v3
        with:
          name: PackSquash CLI executable (${{ matrix.target }})
          path: target/${{ env.CARGO_BUILD_TARGET }}/release/packsquash${{ matrix.executable-extension }}

      - name: 📤 Upload CLI Debian package
        if: endsWith(matrix.target, '-linux-gnu')
        uses: actions/upload-artifact@v3
        with:
          name: PackSquash CLI Debian package (${{ matrix.apt-arch }})
          path: target/${{ env.CARGO_BUILD_TARGET }}/debian/packsquash_*.deb

  build-universal-macos-binaries:

    runs-on: macos-latest

    needs: build

    steps:
      - name: 📥 Download PackSquash CLI x64 MacOS executable
        uses: actions/download-artifact@v3
        with:
          name: PackSquash CLI executable (x86_64-apple-darwin)
          path: packsquash-x64

      - name: 📥 Download PackSquash CLI ARM64 MacOS executable
        uses: actions/download-artifact@v3
        with:
          name: PackSquash CLI executable (aarch64-apple-darwin)
          path: packsquash-aarch64

      - name: 🔨 Generate universal CLI binary
        run: lipo -create -output packsquash_cli packsquash-x64/packsquash_cli packsquash-aarch64/packsquash_cli

      - name: 📤 Upload universal CLI binary
        uses: actions/upload-artifact@v3
        with:
          name: PackSquash CLI executable (universal-apple-darwin)
          path: packsquash_cli

  build-docker-images:

    runs-on: ubuntu-latest

    env:
      # Defaults to docker.io (Docker Hub)
      REGISTRY: ghcr.io
      # github.repository as <account>/<repo>
      IMAGE_NAME: ${{ github.repository }}

    needs: build

    steps:
      - name: 📥 Checkout source
        uses: actions/checkout@v3

      - name: 🧰 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: ⚙️ Generate Docker image metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # Tag the image as "edge" for every commit on master.
          # Maintain the "latest", full and major and minor semver tags for each semver tag push
          tags: |
            type=edge,branch=master
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          labels: |
            org.opencontainers.image.description=Docker image for PackSquash, the Minecraft resource and data pack optimizer.

      - name: 📥 Download PackSquash CLI x64 musl executable
        uses: actions/download-artifact@v3
        with:
          name: PackSquash CLI executable (x86_64-unknown-linux-musl)

      - name: 📁 Rename PackSquash CLI x64 musl executable
        run: mv packsquash packsquash-amd64

      - name: 📥 Download PackSquash CLI ARM64 musl executable
        uses: actions/download-artifact@v3
        with:
          name: PackSquash CLI executable (aarch64-unknown-linux-musl)

      - name: 📁 Rename PackSquash CLI ARM64 musl executable
        run: mv packsquash packsquash-arm64

      - name: 🔍 Check workflow package write permission
        id: check_write_permission
        uses: assaferan/action-has-permission@3d96069159254de543039461dc5a9c20fadbd6e6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # The GitHub token needs the package:write permission for the push to work.
      # This permission is not given to PRs from forked repositories.
      # See: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
      - name: ⚙️ Login to ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        if: steps.check_write_permission.outputs.has-permission
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔨 Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ steps.check_write_permission.outputs.has-permission == '1' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
