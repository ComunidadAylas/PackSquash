name: Build

on:
  push:
    paths:
      # Source code and assets, build and test scripts
      - packages/**
      - appimage/**
      - common/**
      - scripts/build_*
      - scripts/test-packs/**
      # Rust toolchain configuration file
      - rust-toolchain
      - rustfmt.toml
      - deny.toml
      - Cargo.toml
      - Cargo.lock
      - '**/.cargo/config.toml'
      # Git files that may affect how test files are checked in
      - .gitattributes
      # GitHub Actions workflows
      - .github/workflows/*.yml
  pull_request:
    types:
      - opened
      - synchronize
  release:
    types:
      - published
  schedule:
    # Run this workflow each Monday at midnight even if no other
    # events happen, to guarantee that it completes successfully
    # in the latest Rust toolchain versions
    - cron: '0 0 * * MON'

env:
  CARGO_TERM_COLOR: always
  CARGO_DEB_VERSION: 1.34.0
  CONST_RANDOM_SEED: ${{ secrets.CONST_RANDOM_SEED }}
  APPDIR: AppDir
  REPO_DIR: /pkgs

jobs:
  static-analysis:

    runs-on: ubuntu-latest

    # Only run if this is not a pull request, or for pull requests on forks
    if: github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name != 'ComunidadAylas/PackSquash'

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rustfmt, clippy

      - name: Install GStreamer libraries and development packages
        run: |
          sudo apt-get update
          sudo apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
                               desktop-file-utils

      - name: Check workflow write permission
        id: check_write_permission
        uses: scherermichael-oss/action-has-permission@1.0.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clippy check (with annotations)
        uses: actions-rs/clippy-check@v1
        if: steps.check_write_permission.outputs.has-permission
        with:
          args: --all-targets -- -D warnings
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Clippy check (without annotations)
        if: ${{ !steps.check_write_permission.outputs.has-permission }}
        run: cargo clippy --all-targets -- -D warnings

      - name: Cargo deny check
        uses: EmbarkStudios/cargo-deny-action@v1

      - name: Check PackSquash Linux desktop entries correctness
        run: desktop-file-validate common/assets/*.desktop

      - name: Format Rust source code
        run: cargo fmt

      - name: Commit and push Rust source code format changes
        uses: EndBug/add-and-commit@v9
        with:
          message: 'Format Rust source code using rustfmt'
          author_name: github-actions[bot]
          author_email: 41898282+github-actions[bot]@users.noreply.github.com

  linux-x64-gnu:

    runs-on: ubuntu-latest

    container: debian:bullseye-slim

    env:
      CARGO_BUILD_TARGET: x86_64-unknown-linux-gnu
      DEBIAN_FRONTEND: noninteractive

    # Only run if this is not a pull request, or for pull requests on forks
    if: github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name != 'ComunidadAylas/PackSquash'

    steps:
      - name: Install development packages, GStreamer libraries, GStreamer development packages and documentation generation packages
        run: |
          apt-get update
          # curl is required by rustup
          apt-get install -yq build-essential git curl \
                              gstreamer1.0-plugins-good gstreamer1.0-plugins-bad \
                              libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
                              markdown html2text

      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rust-src

      - name: Cache Rust artifacts
        uses: Swatinem/rust-cache@v1

      - name: Install cargo-deb
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-deb
          version: ${{ env.CARGO_DEB_VERSION }}

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release -- -Z unstable-options --report-time

      - name: Build with optimized standard library
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ env.CARGO_BUILD_TARGET }} -Z build-std --release

      - name: Generate CLI Debian package
        run: scripts/build_deb.sh --target ${{ env.CARGO_BUILD_TARGET }} -p packsquash-cli -- -Z build-std

      - name: Set VERSION environment variable for AppImage
        run: echo "VERSION=$(git describe --tags --dirty=-custom)" >> $GITHUB_ENV

      - name: Generate CLI AppImage
        uses: AppImageCrafters/build-appimage@master
        env:
          TARGET_APPIMAGE_ARCH: x86_64
          TARGET_APPIMAGE_APT_ARCH: amd64
        with:
          recipe: appimage/recipe.yml

      - name: Upload CLI binary
        uses: actions/upload-artifact@v3
        with:
          name: 'PackSquash executable (Linux, x64, glibc)'
          path: target/${{ env.CARGO_BUILD_TARGET }}/release/packsquash

      - name: Upload CLI Debian package
        uses: actions/upload-artifact@v3
        with:
          name: 'PackSquash CLI Debian package (amd64)'
          path: target/${{ env.CARGO_BUILD_TARGET }}/debian/packsquash_*.deb

      - name: Upload CLI AppImage
        uses: actions/upload-artifact@v3
        with:
          name: 'PackSquash CLI AppImage (x64)'
          path: PackSquash-*-x86_64.AppImage

      - name: Upload CLI AppImage update diff
        uses: actions/upload-artifact@v3
        with:
          name: 'PackSquash CLI AppImage zsync (x64)'
          path: PackSquash-*-x86_64.AppImage.zsync

  windows-x64-gnu:

    runs-on: windows-latest

    env:
      CARGO_BUILD_TARGET: x86_64-pc-windows-gnu
      PKG_CONFIG_ALLOW_CROSS: 1

    # Only run if this is not a pull request, or for pull requests on forks
    if: github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name != 'ComunidadAylas/PackSquash'

    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          target: ${{ env.CARGO_BUILD_TARGET }}
          profile: minimal
          components: rust-src

      - name: Cache Rust artifacts
        uses: Swatinem/rust-cache@v1

      - name: Install GStreamer libraries and GStreamer development packages
        run: |
          Invoke-WebRequest -Uri 'https://gstreamer.freedesktop.org/data/pkg/windows/1.20.1/mingw/gstreamer-1.0-devel-mingw-x86_64-1.20.1.msi' -OutFile 'gstreamer-1.0-devel-mingw-x86_64.msi'
          Start-Process msiexec.exe -ArgumentList '/i gstreamer-1.0-devel-mingw-x86_64.msi /qn' -Wait
          "PKG_CONFIG_PATH=C:\gstreamer\1.0\mingw_x86_64\lib\pkgconfig" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          $tmp_file = New-TemporaryFile | Rename-Item -NewName { $_.Name -replace '.tmp', '.zip' } -PassThru
          Invoke-WebRequest -Uri 'https://ftp.rrze.uni-erlangen.de/xbmc/build-deps/win32/mingw-msys/pkg-config-lite-0.28-1_bin-win32.zip' -OutFile $tmp_file
          $tmp_file | Expand-Archive -DestinationPath "$env:GITHUB_WORKSPACE\pkg-config-lite-0.28-1" -Force
          $tmp_file | Remove-Item
          "$env:GITHUB_WORKSPACE\pkg-config-lite-0.28-1\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          Invoke-WebRequest -Uri 'https://gstreamer.freedesktop.org/data/pkg/windows/1.20.1/mingw/gstreamer-1.0-mingw-x86_64-1.20.1.msi' -OutFile 'gstreamer-1.0-mingw-x86_64.msi'
          Start-Process msiexec.exe -ArgumentList '/i gstreamer-1.0-mingw-x86_64.msi /qn' -Wait
          "C:\gstreamer\1.0\mingw_x86_64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release -- -Z unstable-options --report-time

      - name: Build with optimized standard library
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ env.CARGO_BUILD_TARGET }} -Z build-std --release

      - name: Set binary resource data
        run: target/set_executable_resource_data.ps1

      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: 'PackSquash CLI executable (Windows, x64)'
          path: target/${{ env.CARGO_BUILD_TARGET }}/release/packsquash.exe

  macos-x64-darwin:

    runs-on: macos-11

    env:
      CARGO_BUILD_TARGET: x86_64-apple-darwin
      PKG_CONFIG: /Library/Frameworks/GStreamer.framework/Versions/Current/bin/pkg-config
      PKG_CONFIG_PATH: /Library/Frameworks/GStreamer.framework/Versions/Current/lib/pkgconfig
      # Setting rpath manually is needed because GStreamer libraries became relocatable on macOS
      # for 1.20.1 and Rust GStreamer build systems do not set it properly yet.
      # Related reads:
      # https://gitlab.freedesktop.org/gstreamer/cerbero/-/merge_requests/807
      # https://gitlab.freedesktop.org/gstreamer/cerbero/-/issues/338
      RUSTFLAGS: >
        -C link-args=-Wl,-rpath,/Library/Frameworks/GStreamer.framework/Versions/1.0/lib

    # Only run if this is not a pull request, or for pull requests on forks
    if: github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name != 'ComunidadAylas/PackSquash'

    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rust-src

      - name: Cache Rust artifacts
        uses: Swatinem/rust-cache@v1

      - name: Install GStreamer libraries and GStreamer development packages
        run: |
          curl -o /tmp/gstreamer.pkg https://gstreamer.freedesktop.org/data/pkg/osx/1.20.1/gstreamer-1.0-1.20.1-universal.pkg
          sudo installer -pkg /tmp/gstreamer.pkg -target /
          curl -o /tmp/gstreamer-devel.pkg https://gstreamer.freedesktop.org/data/pkg/osx/1.20.1/gstreamer-1.0-devel-1.20.1-universal.pkg
          sudo installer -pkg /tmp/gstreamer-devel.pkg -target /

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release -- -Z unstable-options --report-time

      - name: Build with optimized standard library
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ env.CARGO_BUILD_TARGET }} -Z build-std --release

      - name: Upload CLI binary
        uses: actions/upload-artifact@v3
        with:
          name: 'PackSquash CLI executable (macOS, x64)'
          path: target/${{ env.CARGO_BUILD_TARGET }}/release/packsquash

  linux-aarch64-gnu:

    runs-on: ubuntu-latest

    container: debian:bullseye-slim

    env:
      CARGO_BUILD_TARGET: aarch64-unknown-linux-gnu
      PKG_CONFIG_ALLOW_CROSS: 1
      PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig
      DEBIAN_FRONTEND: noninteractive

    # Only run if this is not a pull request, or for pull requests on forks
    if: github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name != 'ComunidadAylas/PackSquash'

    steps:
      - name: Install development packages, cross-compilation GCC toolchain, GStreamer libraries, GStreamer development packages and documentation generation packages
        run: |
          dpkg --add-architecture arm64
          apt-get update
          # lizlzma-dev is required by cargo-deb. curl is required by rustup
          apt-get install -yq build-essential git liblzma-dev curl \
                              gcc-aarch64-linux-gnu libgstreamer-plugins-base1.0-dev:arm64 \
                              qemu-user gstreamer1.0-plugins-good:arm64 gstreamer1.0-plugins-bad:arm64 \
                              markdown html2text

      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          target: ${{ env.CARGO_BUILD_TARGET }}
          profile: minimal
          components: rust-src

      - name: Cache Rust artifacts
        uses: Swatinem/rust-cache@v1

      - name: Install cargo-deb
        uses: actions-rs/install@v0.1
        env:
          CARGO_BUILD_TARGET: x86_64-unknown-linux-gnu
        with:
          crate: cargo-deb
          version: ${{ env.CARGO_DEB_VERSION }}

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release -- -Z unstable-options --report-time

      - name: Build with optimized standard library
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ env.CARGO_BUILD_TARGET }} -Z build-std --release

      - name: Generate CLI Debian package
        run: scripts/build_deb.sh --target ${{ env.CARGO_BUILD_TARGET }} -p packsquash-cli -- -Z build-std

      - name: Set VERSION environment variable for AppImage
        run: echo "VERSION=$(git describe --tags --dirty=-custom)" >> $GITHUB_ENV

      - name: Generate CLI AppImage
        uses: AppImageCrafters/build-appimage@master
        env:
          TARGET_APPIMAGE_ARCH: aarch64
          TARGET_APPIMAGE_APT_ARCH: arm64
        with:
          recipe: appimage/recipe.yml

      - name: Upload CLI binary
        uses: actions/upload-artifact@v3
        with:
          name: 'PackSquash executable (Linux, AArch64-ARM64, glibc)'
          path: target/${{ env.CARGO_BUILD_TARGET }}/release/packsquash

      - name: Upload CLI Debian package
        uses: actions/upload-artifact@v3
        with:
          name: 'PackSquash CLI Debian package (arm64)'
          path: target/${{ env.CARGO_BUILD_TARGET }}/debian/packsquash_*.deb

      - name: Upload CLI AppImage
        uses: actions/upload-artifact@v3
        with:
          name: 'PackSquash CLI AppImage (arm64)'
          path: PackSquash-*-aarch64.AppImage

      - name: Upload CLI AppImage update diff
        uses: actions/upload-artifact@v3
        with:
          name: 'PackSquash CLI AppImage zsync (arm64)'
          path: PackSquash-*-aarch64.AppImage.zsync

  benchmark:

    runs-on: ubuntu-latest

    container: debian:bullseye-slim

    # Benchmark failure is not critical enough to fail the whole workflow.
    # We will keep an eye on them anyway, though
    continue-on-error: true

    # Make sure that benchmarks stay quick, and handle them being stuck promptly
    timeout-minutes: 30

    # Only benchmark code that passes all the checks
    needs: [ static-analysis, linux-x64-gnu, windows-x64-gnu, macos-x64-darwin, linux-aarch64-gnu ]

    env:
      DEBIAN_FRONTEND: noninteractive

    # Ignore runs that don't have the secret needed to decrypt packs (this happens for PRs outside
    # the repository, or Dependabot runs). First-time would-be contributors need to have their
    # workflows approved anyway, but at best it might be confusing to see commits of PRs mixed
    # with the mainline. Workflows triggered by PRs don't have access to secrets either
    if: success() && github.event_name != 'pull_request' && !startsWith(github.ref_name, 'dependabot/')

    steps:
      - name: Install development packages, GStreamer libraries, GStreamer development packages and benchmark script packages
        run: |
          apt-get update
          # curl is required by rustup
          apt-get install -yq build-essential git curl \
                              gstreamer1.0-plugins-good gstreamer1.0-plugins-bad \
                              libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
                              python3-venv gpg

      - name: Checkout source
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal

      - name: Cache Rust artifacts
        uses: Swatinem/rust-cache@v1

      - name: Download test packs dataset
        run: scripts/test-packs/download.sh

      - name: Decrypt private test packs in dataset
        env:
          PRIVATE_TEST_PACKS_PASSWORD: ${{ secrets.PRIVATE_TEST_PACKS_PASSWORD }}
        run: scripts/test-packs/decrypt.sh

      # GitHub-hosted runners restrict access to the perf_event_open syscall for some event types we
      # are interested in, so we can't run benchmarks that measure the troublesome performance counters.
      # See: https://github.com/actions/virtual-environments/issues/4974
      - name: Run quick benchmarks
        run: cargo bench -- --output-format=bencher 'wall_time' | tee /run/bench_results.txt

      - name: Publish quick benchmarks results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: 'PackSquash library quick benchmarks'
          tool: cargo
          output-file-path: /run/bench_results.txt
          benchmark-data-dir-path: dev/benches
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          comment-always: true
          comment-on-alert: true
          alert-threshold: 150%
          fail-on-alert: false
          max-items-in-chart: 50
